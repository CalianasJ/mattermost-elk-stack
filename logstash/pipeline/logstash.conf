input {
  http {
    port => 5000
    codec => "json"
  }
}

filter {
  # Parser la ligne de log Scalingo
  grok {
    match => { "message" => "^%{TIMESTAMP_ISO8601:scalingo_timestamp} %{WORD:timezone}\[%{DATA:process}\] %{GREEDYDATA:json_part}" }
  }
  
  # Parser la partie JSON de Mattermost
  if [json_part] {
    json {
      source => "json_part"
      target => "mattermost"
    }
  }
  
  # Extraire les champs importants
  if [mattermost] {
    mutate {
      add_field => { "mattermost_timestamp" => "%{[mattermost][timestamp]}" }
      add_field => { "log_level" => "%{[mattermost][level]}" }
      add_field => { "log_message" => "%{[mattermost][msg]}" }
      add_field => { "caller" => "%{[mattermost][caller]}" }
      add_field => { "api_path" => "%{[mattermost][path]}" }
      add_field => { "request_id" => "%{[mattermost][request_id]}" }
      add_field => { "ip_address" => "%{[mattermost][ip_addr]}" }
      add_field => { "user_id" => "%{[mattermost][user_id]}" }
      add_field => { "http_method" => "%{[mattermost][method]}" }
      add_field => { "http_code" => "%{[mattermost][http_code]}" }
      add_field => { "error_message" => "%{[mattermost][error]}" }
    }
  }
  
  # Convertir le timestamp Mattermost
  if [mattermost_timestamp] {
    date {
      match => [ "mattermost_timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  # Nettoyer les champs vides
  if [api_path] == "" { mutate { remove_field => ["api_path"] } }
  if [request_id] == "" { mutate { remove_field => ["request_id"] } }
  if [ip_address] == "" { mutate { remove_field => ["ip_address"] } }
  if [user_id] == "" { mutate { remove_field => ["user_id"] } }
  if [http_method] == "" { mutate { remove_field => ["http_method"] } }
  if [http_code] == "" { mutate { remove_field => ["http_code"] } }
  if [error_message] == "" { mutate { remove_field => ["error_message"] } }
}

output {
  elasticsearch {
    hosts => ["${ELASTICSEARCH_URL}"]
    index => "mattermost-logs-%{+YYYY.MM.dd}"
  }
  
  # Pour debug (optionnel)
  stdout {
    codec => rubydebug
  }
}
